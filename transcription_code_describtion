#Voice-to-Text Transcription Script

##Overview
This script downloads audio episodes from given URLs, converts them to the correct audio format, and transcribes their content using the Whisper speech-to-text model.

---

##Inputs
- **top_podcasts.json**  
  Podcast metadata from Podcast Index API, including title, description, id, and author.

- **top_episodes.json**  
  Episode metadata containing `audio_url`, `title`, and `id`.

---

## Outputs
- Transcripts saved in the `transcripts/` folder as JSON files.

---

## Features
- Fetches trending podcast episodes from Podcast Index based on recent engagement (not just total listens).
- Uses Hugging Face authentication token (via environment variable `HUGGINGFACE_TOKEN`) to access Whisper models.
- Supports configurable model size (default: `tiny`) for faster transcription.
- Uses parallel processing with configurable number of workers to speed up transcription.

---

## Setup and Configuration
- **Authentication:**  
  Requires setting environment variable `HUGGINGFACE_TOKEN` for Hugging Face API login.
  
- **Model Configuration:**  
  Select the Whisper model size (e.g., tiny, base, small). Smaller models run faster but may be less accurate.

- **Concurrency:**  
  Set the number of parallel workers (`MAX_WORKERS`) to balance transcription speed and system load.

---

## Processing Steps

1. **Load Episode Data:**  
   Reads `top_episodes.json` which contains metadata about episodes such as titles and audio URLs.

2. **Audio Download:**  
   Downloads each audio file in chunks to efficiently handle large files.

3. **Audio Conversion:**  
   Converts the audio to WAV format with mono channel and 16kHz sample rate, as required by Whisper.

4. **Temporary File Handling:**  
   Writes converted audio to a temporary `.wav` file for processing.

5. **Transcription:**  
   Uses the Whisper model to transcribe the temporary audio file into text.

6. **Transcript Assembly:**  
   Collects all segments of the transcription into one complete transcript string.

7. **Concurrency:**  
   Processes multiple episodes concurrently using `ThreadPoolExecutor` with a configurable number of workers (default is 2).
